18. "=> nil" es el resultado de la expresión puts.

21. Con las comillas dobles ("") lo interpreta, mientras que con 
las simples ('') lo escribe literalmente.


22. %q funciona como las comillas dobles, interpreta los caracteres especiales.

23. %Q funciona como las comillas simples, escribe literalmente.

24. c = "--4--\n--2--\n"

25. c = "--\#{a}--\n--\#{b}--\n" 

26. s = "hello"
s[0,2]  => "he" 
s[-1,1] => "o" 
s[0,10] => "hello" 

27. g = "hello world"

28. e = "..."

29. "2 2 2 "

30. %w separa palabras entre espacios.

31. %w evalua los caracteres especiales separados por espacios.

32. %W escribe literalmente cada palabra separada por espacios

33. => [nil, nil, nil]

34. => [0, 0, 0]

35. b= [[1,2],[3,4]]

36. [0,2,4] -> 0*2, 1*2, 2*2

37. 
=> ["b"]    
=> ["d", "e"]
=> ["a", "b", "c"]
=> ["a"]
=> ["d", "e"]

38. 
=> ["A", "B", "c", "d", "e"]
=> ["A", "B", "C", "D", "E"]
=> [1, 2, 3, "A", "B", "C", "D", "E"]
=> [3, "A", "B", "C", "D", "E"]
=> [3, "A", "B", "C", "D", "E", "Z"]
=> [3, "A", "B", "C", "D"]

39. 
=> [1,2,3,4]
=> [1,2,3,4,4,5]
=> [1,2,3,4,4,5,[6,7,8]]
Type Error: Can´t convert Fixnum into Array

40. 
=> ["a", "b", "c", "b", "a"]
=> ["a", "a"]

41. 
=> [0,0,0,0,0,0,0,0]

42. 
=> [1]
=> [1, 2, 3]
=> [1, 2, 3, [4, 5, 6]]
=> [1, 2, 3, [4, 5, 6], 7, 8]

43.
=> [1, 2, 3, 4, 5]
=> [5, 4, 3, 2, 1]
=> [2, 3, 4]
=> [4, 3, 2]

44.
=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
=> [1, 2, 3, 4, 5, 6, 7, 8, 9]
=> false
=> true
1 3 5 7 9 => 1...10

45.
=> true
=> true
=> true

46.
=> TrueClass

=> FalseClass

hello 
=> nil

=> nil

(irb):9: warning: string literal in condition
hello
=> nil


47.
=> Symbol
=> false
=> true
=> Symbol
=> false
=> true

48.
Rub=> nil
RubJava=> nil

49.
=> "3 rubies"

50.
=> [4, 5]
=> 5
=> [1, 2, 3]

51.
=> [:b, :a]
=> [2, 1]
=> 3
=> {:b=>2, :c=>3, :a=>1}
=> {:b=>2, :c=>3}
=> {:a=>1}
=> {:a=>1}


52.Llama al bloque que va despues y le pasa como parámetros 4,5
def test
	yield 4,5
end
test {|a,b| a+b}
Para pasar un bloque como argumento

53.
counts=Hash.new(0)
=> {}
Crear un objeto vacío de la calse Hash

Los elementos del Hash son inicializados a 0 en el primer caso, mientras que
con counts={} son inicializados a nil.

54.
=> ["hello", "world", "hello", "LPP"]

55.
Debería mostrar como salida a 'c' ordenado por las claves (a,b,c).
Sin embargo da error de metodo indefinido para el simbolo b.


















































